{"version":3,"sources":["domain/actions.js","domain/reducers.js","sagas/index.js","pages/PageNotFound/styles.js","pages/PageNotFound/PageNotFound.jsx","pages/PageNotFound/index.js","components/Timer/Timer.jsx","components/TaskNameWarning/styles.js","components/TaskNameWarning/TaskNameWarning.jsx","components/TaskNameWarning/index.js","components/Timer/styles.js","components/Timer/TimerContainer.jsx","components/Timer/index.js","components/TasksChart/createChartData.js","components/TasksChart/TasksChart.jsx","components/TasksChart/styles.js","components/TasksChart/TasksChartContainer.jsx","components/TasksChart/index.js","components/TasksList/TasksList.jsx","components/TasksList/styles.js","components/TasksList/TasksListContainer.jsx","components/TasksList/index.js","pages/TabsAndTimer/styles.js","pages/TabsAndTimer/TabsAndTimer.jsx","pages/TabsAndTimer/index.js","components/CurrentTask/CurrentTask.jsx","components/CurrentTask/CurrentTaskChart.jsx","components/CurrentTask/createTaskChartData.js","components/CurrentTask/styles.js","components/CurrentTask/CurrentTaskContainer.jsx","components/CurrentTask/index.js","pages/App/App.js","pages/App/index.js","serviceWorker.js","index.js"],"names":["START_TIMER","STOP_TIMER","SET_TASK_NAME","SET_TASKS_LIST_VALUE","DELETE_TASK","SYNC_TIMER_START_TIME","SYNC_TASKS_LIST","SYNC_TASK_NAME","syncTimerStartTime","payload","type","syncTasksList","syncTaskName","initialState","tasksList","taskProps","id","taskName","timerStartTime","timerStopTime","putStartTimeInStorage","putTaskNameInStorage","debounceTaskName","clearTaskPropsAndPutTasksListInStorage","putTasksListInStorage","setStateFromStorage","rootSaga","select","state","localStorage","setItem","debounce","call","removeItem","JSON","stringify","parse","getItem","put","all","takeLatest","container","paddingTop","color","paddingBottom","buttonContainer","display","justifyContent","paddingRight","withStyles","PageNotFound","styles","memo","classes","Grid","className","justify","Card","CardContent","Typography","variant","CardActions","Button","size","component","Link","to","verifyTaskName","setTaskName","startTask","time","timerContainer","taskInput","timerFab","timerButton","label","placeholder","value","onChange","event","target","Fab","onClick","modalContainer","alignItems","modal","flexDirection","width","boxShadow","backgroundColor","modalContent","padding","alertName","alertContent","opacity","TaskNameWarning","setTaskNameIsEmpty","taskNameIsEmpty","Modal","aria-describedby","aria-labelledby","open","prevState","textAlign","height","margin","background","fontSize","marginBottom","TimerContainer","compose","connect","startTimer","stopTimer","useState","setTime","useEffect","intervalID","setTimerTime","Interval","fromDateTimes","DateTime","fromISO","local","toDuration","toFormat","setInterval","clearInterval","createChartData","chartData","hour","hourStart","fromObject","minute","second","hourEnd","hourInterval","tasksTimeInThisHour","filter","task","intersection","tasksMinutesInThisHour","reduce","accumulator","tasksMinutes","taskStartDateTime","taskStopDateTime","toObject","minutes","Math","round","push","getRandomTasks","generateButtonContainer","generateButton","data","top","left","strokeDasharray","dataKey","name","barSize","fill","item","xs","getRandom","min","max","floor","random","TasksChartContainer","setTasksListValue","randomNumberOfTask","plus","seconds","deleteTask","tableRow","noTasks","tasksButton","hideCellIfSmallScreen","center","Table","TableHead","TableRow","TableCell","TableBody","length","map","key","scope","colSpan","TasksListContainer","tasksTimerContainer","tabsContainer","TabsAndTimer","location","currentTab","pathname","lg","AppBar","position","Tabs","Tab","path","exact","TasksList","TasksChart","card","button","dataForChart","createTaskChartData","taskForChart","startTime","taskStartDateFromISO","findStartTime","stopTime","taskStopDateFromISO","findStopTime","CurrentTaskContainer","match","find","Number","params","direction","App","render","Task","Boolean","window","hostname","sagaMiddleware","createSagaMiddleware","store","createStore","action","Date","toISOString","applyMiddleware","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6b9743f.chunk.js","sourcesContent":["export const START_TIMER = \"START_TIMER\";\nexport const STOP_TIMER = \"STOP_TIMER\";\nexport const SET_TASK_NAME = \"SET_TASK_NAME\";\n\nexport const SET_TASKS_LIST_VALUE = \"SET_TASKS_LIST_VALUE\";\nexport const DELETE_TASK = \"DELETE_TASK\";\n\nexport const SYNC_TIMER_START_TIME = \"SYNC_TIMER_START_TIME\";\nexport const SYNC_TASKS_LIST = \"SYNC_STATE_FROM_STORAGE\";\nexport const SYNC_TASK_NAME = \"SYNC_TASK_NAME\";\n\nexport const startTimer = () => {\n  return { type: START_TIMER };\n};\n\nexport const stopTimer = () => {\n  return { type: STOP_TIMER };\n};\n\nexport const setTaskName = payload => {\n  return { type: SET_TASK_NAME, payload };\n};\n\nexport const setTasksListValue = payload => {\n  return { type: SET_TASKS_LIST_VALUE, payload };\n};\n\nexport const deleteTask = payload => {\n  return { type: DELETE_TASK, payload };\n};\n\nexport const syncTimerStartTime = payload => {\n  return { type: SYNC_TIMER_START_TIME, payload };\n};\n\nexport const syncTasksList = payload => {\n  return { type: SYNC_TASKS_LIST, payload };\n};\n\nexport const syncTaskName = payload => {\n  return { type: SYNC_TASK_NAME, payload };\n};\n","import {\n  START_TIMER,\n  STOP_TIMER,\n  SET_TASK_NAME,\n  SET_TASKS_LIST_VALUE,\n  DELETE_TASK,\n  SYNC_TIMER_START_TIME,\n  SYNC_TASKS_LIST,\n  SYNC_TASK_NAME\n} from \"./actions\";\n\nconst initialState = {\n  tasksList: [],\n\n  taskProps: {\n    id: null,\n    taskName: null,\n    timerStartTime: null,\n    timerStopTime: null\n  }\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case START_TIMER:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          timerStartTime: new Date().toISOString()\n        }\n      };\n\n    case STOP_TIMER:\n      return {\n        ...state,\n        taskProps: initialState.taskProps,\n        tasksList: [\n          ...state.tasksList,\n          {\n            ...state.taskProps,\n            id:\n              state.tasksList.length > 0\n                ? Math.max(...state.tasksList.map(task => task.id)) + 1\n                : 1,\n            timerStopTime: new Date().toISOString()\n          }\n        ]\n      };\n\n    case SET_TASK_NAME:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          taskName: action.payload\n        }\n      };\n\n    case SET_TASKS_LIST_VALUE:\n      return {\n        ...state,\n        tasksList: action.payload\n      };\n\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasksList: state.tasksList.filter(task => task.id !== action.payload)\n      };\n\n    case SYNC_TIMER_START_TIME:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          timerStartTime: action.payload\n        }\n      };\n\n    case SYNC_TASKS_LIST:\n      return {\n        ...state,\n        tasksList: [...state.tasksList, ...action.payload]\n      };\n\n    case SYNC_TASK_NAME:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          taskName: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n","import {\n  all,\n  call,\n  debounce,\n  select,\n  put,\n  takeLatest\n} from \"redux-saga/effects\";\n\nimport {\n  syncTimerStartTime,\n  syncTasksList,\n  syncTaskName,\n  SET_TASKS_LIST_VALUE,\n  SET_TASK_NAME,\n  DELETE_TASK,\n  START_TIMER,\n  STOP_TIMER\n} from \"../domain/actions\";\n\nfunction* putStartTimeInStorage() {\n  const timerStartTime = yield select(state => state.taskProps.timerStartTime);\n\n  localStorage.setItem(\"StartTime\", timerStartTime);\n}\n\nfunction* putTaskNameInStorage() {\n  const taskName = yield select(state => state.taskProps.taskName);\n\n  localStorage.setItem(\"TaskName\", taskName);\n}\n\nfunction* debounceTaskName() {\n  yield debounce(250, SET_TASK_NAME, putTaskNameInStorage);\n}\n\nfunction* clearTaskPropsAndPutTasksListInStorage() {\n  yield call(() => putTasksListInStorage());\n  localStorage.removeItem(\"StartTime\");\n  localStorage.removeItem(\"TaskName\");\n}\nfunction* putTasksListInStorage() {\n  const tasksList = yield select(state => state.tasksList);\n\n  localStorage.setItem(\"TasksList\", JSON.stringify(tasksList));\n}\n\nfunction* setStateFromStorage() {\n  const tasksList = JSON.parse(localStorage.getItem(\"TasksList\")) || [];\n  const timerStartTime = localStorage.getItem(\"StartTime\") || null;\n  const taskName = localStorage.getItem(\"TaskName\") || null;\n\n  yield put(syncTimerStartTime(timerStartTime));\n  yield put(syncTasksList(tasksList));\n  yield put(syncTaskName(taskName));\n}\n\nexport default function* rootSaga() {\n  yield all([\n    call(() => setStateFromStorage()),\n    call(() => debounceTaskName()),\n    takeLatest(START_TIMER, putStartTimeInStorage),\n    takeLatest(STOP_TIMER, clearTaskPropsAndPutTasksListInStorage),\n    takeLatest(SET_TASKS_LIST_VALUE, putTasksListInStorage),\n    takeLatest(DELETE_TASK, putTasksListInStorage)\n  ]);\n}\n","const blue = \"#00BCD3\";\n\nexport default {\n  container: {\n    paddingTop: \"10%\",\n\n    \"& h4\": {\n      color: blue,\n      paddingBottom: \"1rem\"\n    }\n  },\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n\n    paddingRight: \"1rem\",\n    paddingBottom: \".5rem\",\n\n    \"& span\": {\n      color: blue\n    }\n  }\n};\n","import React, { memo } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nfunction PageNotFound({ classes: { container, buttonContainer } }) {\n  return (\n    <Grid container className={container} justify=\"center\">\n      <Card>\n        <CardContent>\n          <Typography variant=\"h4\">There is no such task :(</Typography>\n          <Typography color=\"textSecondary\">\n            Can try to find it on the home page?\n          </Typography>\n        </CardContent>\n        <CardActions className={buttonContainer}>\n          <Button size=\"small\" component={Link} to={\"/tasks\"}>\n            Homepage\n          </Button>\n        </CardActions>\n      </Card>\n    </Grid>\n  );\n}\n\nexport default withStyles(styles)(memo(PageNotFound));\n","import PageNotFound from \"./PageNotFound\";\nexport default PageNotFound;\n","import React, { memo } from \"react\";\n\nimport TextField from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\n\nfunction Timer({\n  verifyTaskName,\n  setTaskName,\n  startTask,\n\n  timerStartTime,\n  taskName,\n  time,\n\n  classes: { timerContainer, taskInput, timerFab, timerButton }\n}) {\n  return (\n    <div className={timerContainer}>\n      <TextField\n        label=\"Name of your task\"\n        placeholder=\"Name of your task\"\n        className={taskInput}\n        value={taskName || \"\"}\n        onChange={event => setTaskName(event.target.value)}\n      />\n\n      <Fab className={timerFab}>{time}</Fab>\n\n      {timerStartTime ? (\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          className={timerButton}\n          onClick={verifyTaskName}\n        >\n          STOP\n        </Button>\n      ) : (\n        <Button\n          variant=\"contained\"\n          size=\"small\"\n          className={timerButton}\n          onClick={startTask}\n        >\n          START\n        </Button>\n      )}\n    </div>\n  );\n}\n\nexport default memo(Timer);\n","const blue = \"#00BCD3\";\nconst red = \"#CA0045\";\n\nexport default {\n  modalContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  modal: {\n    display: \"flex\",\n    flexDirection: \"column\",\n\n    width: \"60%\",\n\n    boxShadow: \"1px 2px 5px black\",\n    backgroundColor: \"#fff\"\n  },\n  modalContent: {\n    flexDirection: \"column\",\n\n    padding: \"1.5rem\"\n  },\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n\n    paddingRight: \"1rem\",\n    paddingBottom: \".5rem\",\n\n    \"& span\": {\n      color: blue\n    }\n  },\n  alertName: {\n    paddingBottom: \"1rem\",\n\n    color: red\n  },\n  alertContent: {\n    opacity: 0.7\n  }\n};\n","import React, { memo } from \"react\";\n\nimport Modal from \"@material-ui/core/Modal\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nfunction TaskNameWarning({\n  setTaskNameIsEmpty,\n  taskNameIsEmpty,\n  classes: {\n    buttonContainer,\n    modalContainer,\n    modalContent,\n    alertContent,\n    alertName,\n    modal\n  }\n}) {\n  return (\n    <Modal\n      aria-describedby=\"simple-modal-description\"\n      aria-labelledby=\"simple-modal-title\"\n      className={modalContainer}\n      open={taskNameIsEmpty}\n    >\n      <div className={modal}>\n        <Grid container className={modalContent}>\n          <Typography variant=\"h6\" id=\"modal-title\" className={alertName}>\n            Empty task name\n          </Typography>\n          <Typography\n            id=\"simple-modal-description\"\n            className={alertContent}\n            variant=\"subtitle1\"\n          >\n            You are trying close your task without name, enter the title and try\n            again!\n          </Typography>\n        </Grid>\n\n        <div className={buttonContainer}>\n          <Button\n            onClick={() => {\n              setTaskNameIsEmpty(prevState => !prevState);\n            }}\n          >\n            Close\n          </Button>\n        </div>\n      </div>\n    </Modal>\n  );\n}\n\nexport default withStyles(styles)(memo(TaskNameWarning));\n","import TaskNameWarning from \"./TaskNameWarning\";\nexport default TaskNameWarning;\n","const violet = \"#4823C2\";\n\nexport default {\n  timerContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  },\n\n  taskInput: {\n    \"& $input::placeholder\": {\n      color: violet,\n      textAlign: \"center\",\n      opacity: 1\n    }\n  },\n\n  timerFab: {\n    width: \"10rem\",\n    height: \"10rem\",\n\n    margin: \"1.5rem\",\n\n    background: \"white\",\n\n    color: violet,\n    fontSize: \"1.5rem\"\n  },\n\n  timerButton: {\n    color: violet,\n    background: \"white\",\n    marginBottom: \"1.5rem\"\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { DateTime, Interval } from \"luxon\";\n\nimport { setTaskName, startTimer, stopTimer } from \"../../domain/actions\";\n\nimport Timer from \"./Timer\";\nimport TaskNameWarning from \"../TaskNameWarning\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nfunction TimerContainer({\n  setTaskName,\n  taskProps,\n  startTimer,\n  stopTimer,\n  classes\n}) {\n  const [taskNameIsEmpty, setTaskNameIsEmpty] = useState(false);\n  const [time, setTime] = useState(\"00:00:00\");\n\n  useEffect(() => {\n    let intervalID = 0;\n\n    const setTimerTime = () => {\n      setTime(\n        Interval.fromDateTimes(\n          DateTime.fromISO(taskProps.timerStartTime),\n          DateTime.local()\n        )\n          .toDuration()\n          .toFormat(\"hh:mm:ss\")\n      );\n    };\n\n    if (taskProps.timerStartTime) {\n      setTimerTime();\n      intervalID = setInterval(setTimerTime, 1000);\n    } else {\n      setTime(\"00:00:00\");\n    }\n\n    return () => {\n      clearInterval(intervalID);\n    };\n  }, [taskProps.timerStartTime]);\n\n  const verifyTaskName = () => {\n    taskProps.taskName\n      ? stopTimer()\n      : setTaskNameIsEmpty(prevState => !prevState);\n  };\n\n  return (\n    <>\n      <Timer\n        timerStartTime={taskProps.timerStartTime}\n        taskNameIsEmpty={taskNameIsEmpty}\n        verifyTaskName={verifyTaskName}\n        setTaskName={setTaskName}\n        taskName={taskProps.taskName}\n        startTask={startTimer}\n        time={time}\n        classes={classes}\n      />\n\n      <TaskNameWarning\n        setTaskNameIsEmpty={setTaskNameIsEmpty}\n        taskNameIsEmpty={taskNameIsEmpty}\n      />\n    </>\n  );\n}\n\nconst mapStateToProps = ({ taskProps, tasksList, time }) => {\n  return {\n    time,\n    taskProps,\n    tasksList\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, { setTaskName, startTimer, stopTimer }),\n  withStyles(styles)\n)(TimerContainer);\n","import TimerContainer from \"./TimerContainer\";\nexport default TimerContainer;","import { DateTime, Interval } from \"luxon\";\n\nconst createChartData = tasksList => {\n  const chartData = [];\n\n  for (let hour = 0; hour < 24; hour++) {\n    const hourStart = DateTime.fromObject({ hour, minute: 0, second: 0 });\n    const hourEnd = DateTime.fromObject({ hour, minute: 59, second: 59 });\n    const hourInterval = Interval.fromDateTimes(hourStart, hourEnd);\n\n    const tasksTimeInThisHour = tasksList.filter(task =>\n      hourInterval.intersection(\n        Interval.fromDateTimes(\n          DateTime.fromISO(task.timerStartTime),\n          DateTime.fromISO(task.timerStopTime)\n        )\n      )\n    );\n\n    let tasksMinutesInThisHour;\n\n    if (tasksTimeInThisHour) {\n      tasksMinutesInThisHour = tasksTimeInThisHour.reduce(\n        (accumulator, task) => {\n          let tasksMinutes;\n\n          const taskStartDateTime = DateTime.fromISO(task.timerStartTime);\n          const taskStopDateTime = DateTime.fromISO(task.timerStopTime);\n\n          taskStartDateTime.hour === hour && taskStopDateTime.hour === hour\n            ? (tasksMinutes = Interval.fromDateTimes(\n                taskStartDateTime,\n                taskStopDateTime\n              )\n                .toDuration(\"minutes\")\n                .toObject().minutes)\n            : taskStartDateTime.hour === hour\n            ? (tasksMinutes = 60 - taskStartDateTime.minute)\n            : taskStopDateTime.hour === hour\n            ? (tasksMinutes = taskStopDateTime.minute)\n            : (tasksMinutes = 60);\n\n          return accumulator + Math.round(tasksMinutes);\n        },\n        0\n      );\n    }\n\n    chartData.push({\n      hour,\n      minutes: 60,\n      tasksTimeInThisHour: tasksMinutesInThisHour || 0\n    });\n  }\n\n  return chartData;\n};\n\nexport default createChartData;\n","import React, { memo } from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar\n} from \"recharts\";\n\nfunction TasksChart({\n  getRandomTasks,\n  chartData,\n  classes: { generateButtonContainer, generateButton }\n}) {\n  return (\n    <div>\n      <ResponsiveContainer id=\"container\" width=\"100%\" height={300}>\n        <BarChart data={chartData} margin={{ top: 20, left: -25 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"hour\" />\n          <YAxis dataKey=\"minutes\" />\n          <Tooltip />\n          <Legend />\n          <Bar\n            dataKey=\"tasksTimeInThisHour\"\n            name=\"Minutes in this hours\"\n            barSize={20}\n            fill=\"#4823C2\"\n          />\n        </BarChart>\n      </ResponsiveContainer>\n      <Grid container className={generateButtonContainer}>\n        <Grid item xs={12}>\n          <Button\n            className={generateButton}\n            variant=\"contained\"\n            size=\"small\"\n            onClick={() => getRandomTasks()}\n          >\n            Generate\n          </Button>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default memo(TasksChart);\n","const violet = \"#4823C2\";\n\nexport default {\n  generateButtonContainer: {\n    justifyContent: \"justify-end\",\n    textAlign: \"right\",\n    padding: \"1rem 0\"\n  },\n  generateButton: {\n    color: violet,\n    background: \"white\"\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { DateTime } from \"luxon\";\n\nimport createChartData from \"./createChartData\";\nimport { setTasksListValue } from \"../../domain/actions\";\n\nimport TasksChart from \"./TasksChart\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min + 1);\n};\n\nfunction ChartContainer({ setTasksListValue, tasksList, classes }) {\n  const getRandomTasks = () => {\n    const data = [];\n\n    let timerStartTime = DateTime.fromObject({ hour: 0, minute: 0, second: 0 });\n    let timerStopTime = null;\n\n    const randomNumberOfTask = getRandom(10, 16);\n\n    for (let task = 1; task < randomNumberOfTask; task++) {\n      timerStartTime = timerStartTime.plus({\n        seconds: getRandom(0, 60 * 60 * 1.5)\n      });\n\n      timerStopTime = timerStartTime.plus({\n        seconds: getRandom(60 * 10, 60 * 60 * 1.5)\n      });\n\n      data.push({\n        id: task,\n        taskName: `Random task #${task}`,\n        timerStartTime: timerStartTime,\n        timerStopTime: timerStopTime\n      });\n\n      timerStartTime = timerStopTime;\n    }\n\n    setTasksListValue(data);\n  };\n\n  const chartData = createChartData(tasksList);\n\n  return (\n    <TasksChart\n      getRandomTasks={getRandomTasks}\n      chartData={chartData}\n      classes={classes}\n    />\n  );\n}\n\nconst mapStateToProps = ({ tasksList }) => {\n  return {\n    tasksList\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, { setTasksListValue }),\n  withStyles(styles)\n)(ChartContainer);\n","import TasksChartContainer from \"./TasksChartContainer\";\nexport default TasksChartContainer;\n","import React, { memo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { DateTime, Interval } from \"luxon\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction TasksList({\n  deleteTask,\n  tasksList,\n  classes: { tableRow, noTasks, tasksButton, hideCellIfSmallScreen, center }\n}) {\n  return (\n    <Table>\n      <TableHead>\n        <TableRow>\n          <TableCell className={hideCellIfSmallScreen}>№</TableCell>\n          <TableCell>Task</TableCell>\n          <TableCell className={hideCellIfSmallScreen}>Time start</TableCell>\n          <TableCell className={hideCellIfSmallScreen}>Time end</TableCell>\n          <TableCell className={hideCellIfSmallScreen}>Time spend</TableCell>\n          <TableCell>Info</TableCell>\n          <TableCell>Delete</TableCell>\n        </TableRow>\n      </TableHead>\n      <TableBody>\n        {tasksList.length > 0 ? (\n          tasksList.map(task => (\n            <TableRow key={task.id} className={tableRow}>\n              <TableCell component=\"th\" scope=\"row\" className={hideCellIfSmallScreen}>\n                {task.id}\n              </TableCell>\n              <TableCell className={center}>{task.taskName}</TableCell>\n              <TableCell className={hideCellIfSmallScreen}>\n                {DateTime.fromISO(task.timerStartTime).toFormat(\"HH:mm:ss\")}\n              </TableCell>\n              <TableCell className={hideCellIfSmallScreen}>\n                {DateTime.fromISO(task.timerStopTime).toFormat(\"HH:mm:ss\")}\n              </TableCell>\n              <TableCell className={hideCellIfSmallScreen}>\n                {Interval.fromDateTimes(\n                  DateTime.fromISO(task.timerStartTime),\n                  DateTime.fromISO(task.timerStopTime)\n                )\n                  .toDuration()\n                  .toFormat(\"hh:mm:ss\")}\n              </TableCell>\n              <TableCell className={center}>\n                <Button\n                  className={tasksButton}\n                  variant=\"contained\"\n                  size=\"small\"\n                  component={Link}\n                  to={`/tasks/${task.id}`}\n                >\n                  Info\n                </Button>\n              </TableCell>\n              <TableCell className={center}>\n                <Button\n                  className={tasksButton}\n                  variant=\"contained\"\n                  size=\"small\"\n                  onClick={() => deleteTask(task.id)}\n                >\n                  Delete\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))\n        ) : (\n          <TableRow className={tableRow}>\n            <TableCell className={noTasks} colSpan={7}>\n              No tasks to show\n            </TableCell>\n          </TableRow>\n        )}\n      </TableBody>\n    </Table>\n  );\n}\n\nexport default memo(TasksList);\n","const cyanogen = \"#E8F6FF\";\nconst violet = \"#4823C2\";\n\nexport default {\n  tableRow: {\n    background: cyanogen,\n    color: violet,\n    \"@media (max-width: 480px)\": {\n      alignItems: \"center\"\n    }\n  },\n  noTasks: {\n    textAlign: \"center\"\n  },\n  tasksButton: {\n    color: violet,\n    background: \"white\"\n  },\n  hideCellIfSmallScreen: {\n    \"@media (max-width: 480px)\": {\n      display: \"none\"\n    }\n  },\n  center: {\n    \"@media (max-width: 480px)\": {\n      textAlign: \"center\"\n    }\n  }\n};\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport { deleteTask } from \"../../domain/actions\";\n\nimport TasksList from \"./TasksList\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nfunction TasksListContainer({ deleteTask, tasksList, classes }) {\n  return (\n    <TasksList\n      deleteTask={deleteTask}\n      tasksList={tasksList}\n      classes={classes}\n    />\n  );\n}\n\nconst mapStateToProps = ({ tasksList }) => {\n  return {\n    tasksList\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps, { deleteTask }),\n  withStyles(styles)\n)(TasksListContainer);\n","import TasksListContainer from \"./TasksListContainer\";\nexport default TasksListContainer;\n","const blue = \"#00BCD3\";\n\nexport default {\n  tasksTimerContainer: {\n    padding: \"2rem\"\n  },\n  tabsContainer: {\n    background: blue,\n    boxShadow: \"none\"\n  }\n};\n","import React, { memo } from \"react\";\nimport { Link, Route } from \"react-router-dom\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nimport Timer from \"../../components/Timer\";\nimport TasksChart from \"../../components/TasksChart\";\nimport TasksList from \"../../components/TasksList\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nfunction TabsAndTimer({\n  location,\n  classes: { tasksTimerContainer, tabsContainer }\n}) {\n  const currentTab = location.pathname === \"/chart\" ? \"Chart\" : \"Log\";\n\n  return (\n    <div className={tasksTimerContainer}>\n      <Grid container justify=\"center\">\n        <Grid item xs={12} lg={10}>\n          <Timer />\n        </Grid>\n        <Grid item xs={12} lg={10}>\n          <section>\n            <AppBar position=\"relative\" className={tabsContainer}>\n              <Tabs variant=\"fullWidth\" value={currentTab}>\n                <Tab\n                  value=\"Log\"\n                  label=\"Tasks log\"\n                  component={Link}\n                  to={\"/tasks\"}\n                />\n                <Tab\n                  value=\"Chart\"\n                  label=\"Tasks chart\"\n                  component={Link}\n                  to={\"/chart\"}\n                />\n              </Tabs>\n            </AppBar>\n\n            <Route path=\"/tasks\" exact component={TasksList} />\n            <Route path=\"/chart\" exact component={TasksChart} />\n          </section>\n        </Grid>\n      </Grid>\n    </div>\n  );\n}\n\nexport default withStyles(styles)(memo(TabsAndTimer));\n","import TabsAndTimer from \"./TabsAndTimer\";\nexport default TabsAndTimer;\n","import React, { memo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { DateTime, Interval } from \"luxon\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nfunction CurrentTask({\n  task,\n  classes: { card, taskName, buttonContainer, button }\n}) {\n  return (\n    <Card key={task.id} className={card}>\n      <CardContent>\n        <Typography className={taskName} variant=\"h4\" component=\"h2\">\n          {`Task name: ${task.taskName}`}\n        </Typography>\n        <Typography component=\"p\">\n          {DateTime.fromISO(task.timerStartTime).toFormat(\n            \"'The timer was started on' yyyy-MM-dd 'at' HH:mm:ss\"\n          )}\n        </Typography>\n        <Typography component=\"p\">\n          {DateTime.fromISO(task.timerStopTime).toFormat(\n            \"'The timer was stopped on' yyyy-MM-dd 'at' HH:mm:ss\"\n          )}\n        </Typography>\n        <Typography component=\"p\">\n          {Interval.fromDateTimes(\n            DateTime.fromISO(task.timerStartTime),\n            DateTime.fromISO(task.timerStopTime)\n          )\n            .toDuration()\n            .toFormat(\"'Time spent on task:' hh:mm:ss\")}\n        </Typography>\n      </CardContent>\n      <CardActions className={buttonContainer}>\n        <Button className={button} size=\"small\" component={Link} to=\"/tasks\">\n          Back\n        </Button>\n      </CardActions>\n    </Card>\n  );\n}\n\nexport default memo(CurrentTask);\n","import React, { memo } from \"react\";\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar\n} from \"recharts\";\n\nfunction CurrentTaskChart({ dataForChart }) {\n  return (\n    <ResponsiveContainer id=\"container\" width=\"80%\" height={300}>\n      <BarChart data={dataForChart} margin={{ top: 20 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"hour\" />\n        <YAxis dataKey=\"minutes\" />\n        <Tooltip />\n        <Legend />\n        <Bar\n          dataKey=\"tasksTimeInThisHour\"\n          name=\"Minutes in this hours\"\n          barSize={20}\n          fill=\"#4823C2\"\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n\nexport default memo(CurrentTaskChart);\n","import { DateTime, Interval } from \"luxon\";\n\nconst createTaskChartData = task => {\n  const chartData = [];\n\n  const findStartTime = () => {\n    const taskStartDateFromISO = DateTime.fromISO(task.timerStartTime);\n    const { hour, minute, second } = taskStartDateFromISO;\n    return { hour, minute, second };\n  };\n\n  const findStopTime = () => {\n    const taskStopDateFromISO = DateTime.fromISO(task.timerStopTime);\n    const { hour, minute, second } = taskStopDateFromISO;\n    return { hour, minute, second };\n  };\n\n  const taskForChart = [\n    { startTime: findStartTime(), stopTime: findStopTime() }\n  ];\n\n  for (let hour = 0; hour < 24; hour++) {\n    const hourStart = DateTime.fromObject({ hour, minute: 0, second: 0 });\n    const hourEnd = DateTime.fromObject({ hour, minute: 59, second: 59 });\n    const hourInterval = Interval.fromDateTimes(hourStart, hourEnd);\n\n    const tasksTimeInThisHour = taskForChart.filter(task =>\n      hourInterval.intersection(\n        Interval.fromDateTimes(\n          DateTime.fromObject(task.startTime),\n          DateTime.fromObject(task.stopTime)\n        )\n      )\n    );\n\n    let tasksMinutesInThisHour;\n\n    if (tasksTimeInThisHour) {\n      tasksMinutesInThisHour = tasksTimeInThisHour.reduce(\n        (accumulator, task) => {\n          let tasksMinutes;\n          const taskStartDateTime = DateTime.fromObject(task.startTime);\n          const taskStopDateTime = DateTime.fromObject(task.stopTime);\n\n          taskStartDateTime.hour === hour && taskStopDateTime.hour === hour\n            ? (tasksMinutes = Interval.fromDateTimes(\n                taskStartDateTime,\n                taskStopDateTime\n              )\n                .toDuration(\"minutes\")\n                .toObject().minutes)\n            : taskStartDateTime.hour === hour\n            ? (tasksMinutes = 60 - taskStartDateTime.minute)\n            : taskStopDateTime.hour === hour\n            ? (tasksMinutes = taskStopDateTime.minute)\n            : (tasksMinutes = 60);\n\n          return accumulator + Math.round(tasksMinutes);\n        },\n        0\n      );\n    }\n    chartData.push({\n      hour,\n      minutes: 60,\n      tasksTimeInThisHour: Math.round(tasksMinutesInThisHour) || 0\n    });\n  }\n\n  return chartData;\n};\n\nexport default createTaskChartData;\n","const violet = \"#4823C2\";\n\nexport default {\n  card: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  taskName: {\n    color: violet\n  },\n  buttonContainer: {\n    justifyContent: \"flex-end\"\n  },\n  button: {\n    color: violet,\n    background: \"white\"\n  }\n};\n","import React from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport CurrentTask from \"./CurrentTask\";\nimport CurrentTaskChart from \"./CurrentTaskChart\";\nimport createTaskChartData from \"./createTaskChartData\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nfunction CurrentTaskContainer({ tasksList, match, classes }) {\n  const task = tasksList.find(task => task.id === Number(match.params.id));\n\n  return (\n    <>\n      {task ? (\n        <Grid container alignItems=\"center\" direction=\"column\">\n          <CurrentTask task={task} classes={classes} />\n          <CurrentTaskChart dataForChart={createTaskChartData(task)} />\n        </Grid>\n      ) : (\n        <Redirect to={\"/404\"} />\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = ({ tasksList }) => {\n  return {\n    tasksList\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  withStyles(styles)\n)(CurrentTaskContainer);\n","import CurrentTaskContainer from \"./CurrentTaskContainer\";\nexport default CurrentTaskContainer;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport PageNotFound from \"../PageNotFound\";\nimport TabsAndTimer from \"../TabsAndTimer\";\nimport Task from \"../../components/CurrentTask\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact render={() => <Redirect to=\"/tasks\" />} />\n        <Route path=\"/tasks\" exact component={TabsAndTimer} />\n        <Route path=\"/tasks/:id\" exact component={Task} />\n        <Route path=\"/chart\" exact component={TabsAndTimer} />\n        <Route component={PageNotFound} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./domain/reducers\";\nimport { Provider } from \"react-redux\";\nimport rootSaga from \"./sagas\";\n\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(reducers, applyMiddleware(sagaMiddleware));\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}