{"version":3,"sources":["domain/actions.js","domain/reducers.js","sagas/index.js","pages/PageNotFound/styles.js","pages/PageNotFound/PageNotFound.jsx","pages/PageNotFound/index.js","components/Timer/Timer.jsx","components/TaskNameWarning/styles.js","components/TaskNameWarning/TaskNameWarning.jsx","components/TaskNameWarning/index.js","components/Timer/styles.js","components/Timer/TimerContainer.jsx","components/Timer/index.js","components/TasksChart/createChartData.js","components/TasksChart/TasksChart.jsx","components/TasksChart/styles.js","components/TasksChart/TasksChartContainer.jsx","components/TasksChart/index.js","components/TasksList/TasksList.jsx","components/TasksList/styles.js","components/TasksList/TasksListContainer.jsx","components/TasksList/index.js","pages/TabsAndTimer/styles.js","pages/TabsAndTimer/TabsAndTimer.jsx","pages/TabsAndTimer/index.js","components/CurrentTask/CurrentTask.jsx","components/CurrentTask/CurrentTaskChart.jsx","components/CurrentTask/createTaskChartData.js","components/CurrentTask/styles.js","components/CurrentTask/CurrentTaskContainer.jsx","components/CurrentTask/index.js","pages/App/App.js","pages/App/index.js","serviceWorker.js","index.js"],"names":["START_TASK","STOP_TASK","SET_TASK_NAME","PUSH_TASK_IN_TASKS_LIST","SET_TASKS_LIST_VALUE","DELETE_TASK","SYNC_TIMER_START_TIME","SYNC_TASKS_LIST","SYNC_TASK_NAME","syncTimerStartTime","payload","type","syncTasksList","syncTaskName","initialState","tasksList","taskProps","id","taskName","timerStartTime","timerStopTime","putStartTimeInStorage","putTaskNameInStorage","deleteStartTimeAndNameInStorage","putTasksListInStorage","setStateFromStorage","rootSaga","select","state","localStorage","setItem","removeItem","JSON","stringify","parse","getItem","put","all","takeLatest","container","paddingTop","color","paddingBottom","buttonContainer","display","justifyContent","paddingRight","PageNotFound","this","props","classes","Grid","className","justify","Card","CardContent","Typography","variant","CardActions","Button","size","component","Link","to","PureComponent","withStyles","styles","Timer","verifyTaskName","setTaskName","startTimer","time","timerContainer","taskInput","timerFab","timerButton","label","placeholder","value","onChange","event","target","Fab","onClick","modalContainer","alignItems","modal","flexDirection","width","boxShadow","backgroundColor","modalContent","padding","alertName","alertContent","opacity","TaskNameWarning","changeModalVisibility","taskNameIsEmpty","Modal","aria-describedby","aria-labelledby","open","textAlign","height","margin","background","fontSize","marginBottom","TimerContainer","intervalID","timer","setState","Interval","fromDateTimes","DateTime","fromISO","local","toDuration","toFormat","setInterval","startTask","toISO","stopTimer","stopTask","pushTaskInTasksList","clearInterval","createTaskId","lastTaskId","Math","max","map","task","prevState","Component","mapDispatchToProps","compose","connect","createChartData","chartData","hour","hourStart","fromObject","minute","second","hourEnd","hourInterval","tasksTimeInThisHour","filter","intersection","tasksMinutesInThisHour","reduce","accumulator","tasksMinutes","taskStartDateTime","taskStopDateTime","toObject","minutes","round","push","TasksChart","getRandomTasks","generateButtonContainer","generateButton","data","top","left","strokeDasharray","dataKey","name","barSize","fill","item","xs","getRandom","min","floor","random","ChartContainer","randomNumberOfTask","plus","seconds","setTasksListValue","TasksChartContainer","TasksList","deleteTask","tableRow","noTasks","tasksButton","Table","TableHead","TableRow","TableCell","TableBody","length","key","scope","colSpan","TasksListContainer","tasksTimerContainer","tabsContainer","TabsAndTimer","location","currentTab","pathname","lg","AppBar","position","Tabs","Tab","path","exact","CurrentTask","card","button","CurrentTaskChart","dataForChart","createTaskChartData","taskForChart","startTime","taskStartDateFromISO","findStartTime","stopTime","taskStopDateFromISO","findStopTime","CurrentTaskContainer","match","find","Number","params","direction","App","render","Task","Boolean","window","hostname","sagaMiddleware","createSagaMiddleware","store","createStore","action","applyMiddleware","__REDUX_DEVTOOLS_EXTENSION__","run","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc510f95.chunk.js","sourcesContent":["export const START_TASK = \"START_TASK\";\nexport const STOP_TASK = \"STOP_TASK\";\nexport const SET_TASK_NAME = \"SET_TASK_NAME\";\n\nexport const PUSH_TASK_IN_TASKS_LIST = \"PUSH_TASK_IN_TASKS_LIST\";\nexport const SET_TASKS_LIST_VALUE = \"SET_TASKS_LIST_VALUE\";\nexport const DELETE_TASK = \"DELETE_TASK\";\n\nexport const SYNC_TIMER_START_TIME = \"SYNC_TIMER_START_TIME\";\nexport const SYNC_TASKS_LIST = \"SYNC_STATE_FROM_STORAGE\";\nexport const SYNC_TASK_NAME = \"SYNC_TASK_NAME\";\n\nexport const startTask = payload => {\n  return { type: START_TASK, payload };\n};\n\nexport const stopTask = () => {\n  return { type: STOP_TASK };\n};\n\nexport const setTaskName = payload => {\n  return { type: SET_TASK_NAME, payload };\n};\n\nexport const pushTaskInTasksList = payload => {\n  return { type: PUSH_TASK_IN_TASKS_LIST, payload };\n};\n\nexport const setTasksListValue = payload => {\n  return { type: SET_TASKS_LIST_VALUE, payload };\n};\n\nexport const deleteTask = payload => {\n  return { type: DELETE_TASK, payload };\n};\n\nexport const syncTimerStartTime = payload => {\n  return { type: SYNC_TIMER_START_TIME, payload };\n};\n\nexport const syncTasksList = payload => {\n  return { type: SYNC_TASKS_LIST, payload };\n};\n\nexport const syncTaskName = payload => {\n  return { type: SYNC_TASK_NAME, payload };\n};\n","import {\n  START_TASK,\n  STOP_TASK,\n  SET_TASK_NAME,\n  PUSH_TASK_IN_TASKS_LIST,\n  SET_TASKS_LIST_VALUE,\n  DELETE_TASK,\n  SYNC_TIMER_START_TIME,\n  SYNC_TASKS_LIST,\n  SYNC_TASK_NAME\n} from \"./actions\";\n\nconst initialState = {\n  tasksList: [],\n\n  taskProps: {\n    id: null,\n    taskName: null,\n    timerStartTime: null,\n    timerStopTime: null\n  }\n};\n\nexport default function reducer(state = initialState, action) {\n  switch (action.type) {\n    case START_TASK:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          timerStopTime: null,\n          timerStartTime: action.payload\n        }\n      };\n\n    case STOP_TASK:\n      return {\n        ...state,\n        taskProps: initialState.taskProps\n      };\n\n    case SET_TASK_NAME:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          taskName: action.payload\n        }\n      };\n\n    case PUSH_TASK_IN_TASKS_LIST:\n      return {\n        ...state,\n        tasksList: [...state.tasksList, action.payload]\n      };\n\n    case SET_TASKS_LIST_VALUE:\n      return {\n        ...state,\n        tasksList: action.payload\n      };\n\n    case DELETE_TASK:\n      return {\n        ...state,\n        tasksList: state.tasksList.filter(task => task.id !== action.payload)\n      };\n\n    case SYNC_TIMER_START_TIME:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          timerStartTime: action.payload\n        }\n      };\n\n    case SYNC_TASKS_LIST:\n      return {\n        ...state,\n        tasksList: [...state.tasksList, ...action.payload]\n      };\n\n    case SYNC_TASK_NAME:\n      return {\n        ...state,\n        taskProps: {\n          ...state.taskProps,\n          taskName: action.payload\n        }\n      };\n\n    default:\n      return state;\n  }\n}\n","import { all, select, put, takeLatest } from \"redux-saga/effects\";\nimport {\n  syncTimerStartTime,\n  syncTasksList,\n  syncTaskName,\n  SET_TASKS_LIST_VALUE,\n  SET_TASK_NAME,\n  DELETE_TASK,\n  START_TASK,\n  STOP_TASK\n} from \"../domain/actions\";\n\nexport function* putStartTimeInStorage() {\n  const timerStartTime = yield select(state => state.taskProps.timerStartTime);\n\n  yield localStorage.setItem(\"StartTime\", timerStartTime);\n}\n\nexport function* putTaskNameInStorage() {\n  const taskName = yield select(state => state.taskProps.taskName);\n\n  yield localStorage.setItem(\"TaskName\", taskName);\n}\n\nexport function* deleteStartTimeAndNameInStorage() {\n  yield localStorage.removeItem(\"StartTime\");\n  yield localStorage.removeItem(\"TaskName\");\n}\n\nexport function* putTasksListInStorage() {\n  const tasksList = yield select(state => state.tasksList);\n\n  yield localStorage.setItem(\"TasksList\", JSON.stringify(tasksList));\n}\n\nexport function* setStateFromStorage() {\n  const tasksList = JSON.parse(localStorage.getItem(\"TasksList\")) || [];\n  const timerStartTime = localStorage.getItem(\"StartTime\") || null;\n  const taskName = localStorage.getItem(\"TaskName\") || null;\n\n  yield put(syncTimerStartTime(timerStartTime));\n  yield put(syncTasksList(tasksList));\n  yield put(syncTaskName(taskName));\n}\n\nexport default function* rootSaga() {\n  yield all([\n    setStateFromStorage(),\n    takeLatest(SET_TASKS_LIST_VALUE, putTasksListInStorage),\n    takeLatest(STOP_TASK, deleteStartTimeAndNameInStorage),\n    takeLatest(SET_TASK_NAME, putTaskNameInStorage),\n    takeLatest(DELETE_TASK, putTasksListInStorage),\n    takeLatest(START_TASK, putStartTimeInStorage),\n    takeLatest(STOP_TASK, putTasksListInStorage)\n  ]);\n}\n","const blue = \"#00BCD3\";\n\nexport default {\n  container: {\n    paddingTop: \"10%\",\n\n    \"& h4\": {\n      color: blue,\n      paddingBottom: \"1rem\"\n    }\n  },\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n\n    paddingRight: \"1rem\",\n    paddingBottom: \".5rem\",\n\n    \"& span\": {\n      color: blue\n    }\n  }\n};\n","import React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nclass PageNotFound extends PureComponent {\n  render() {\n    const { container, buttonContainer } = this.props.classes;\n\n    return (\n      <Grid container className={container} justify=\"center\">\n        <Card>\n          <CardContent>\n            <Typography variant=\"h4\">There is no such task :(</Typography>\n            <Typography color=\"textSecondary\">\n              Can try to find it on the home page?\n            </Typography>\n          </CardContent>\n          <CardActions className={buttonContainer}>\n            <Button size=\"small\" component={Link} to={\"/tasks\"}>\n              Homepage\n            </Button>\n          </CardActions>\n        </Card>\n      </Grid>\n    );\n  }\n}\n\nexport default withStyles(styles)(PageNotFound);\n","import PageNotFound from \"./PageNotFound\";\nexport default PageNotFound;\n","import React, { PureComponent } from \"react\";\n\nimport TextField from \"@material-ui/core/Input\";\nimport Button from \"@material-ui/core/Button\";\nimport Fab from \"@material-ui/core/Fab\";\n\nexport default class Timer extends PureComponent {\n  render() {\n    const {\n      verifyTaskName,\n      setTaskName,\n      startTimer,\n\n      timerStartTime,\n      taskName,\n      time,\n\n      classes\n    } = this.props;\n\n    const { timerContainer, taskInput, timerFab, timerButton } = classes;\n\n    return (\n      <div className={timerContainer}>\n        <TextField\n          label=\"Name of your task\"\n          placeholder=\"Name of your task\"\n          className={taskInput}\n          value={taskName || \"\"}\n          onChange={event => setTaskName(event.target.value)}\n        />\n\n        <Fab className={timerFab}>{time}</Fab>\n\n        {timerStartTime ? (\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            className={timerButton}\n            onClick={verifyTaskName}\n          >\n            STOP\n          </Button>\n        ) : (\n          <Button\n            variant=\"contained\"\n            size=\"small\"\n            className={timerButton}\n            onClick={startTimer}\n          >\n            START\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n","const blue = \"#00BCD3\";\nconst red = \"#CA0045\";\n\nexport default {\n  modalContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  modal: {\n    display: \"flex\",\n    flexDirection: \"column\",\n\n    width: \"60%\",\n\n    boxShadow: \"1px 2px 5px black\",\n    backgroundColor: \"#fff\"\n  },\n  modalContent: {\n    flexDirection: \"column\",\n\n    padding: \"1.5rem\"\n  },\n  buttonContainer: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n\n    paddingRight: \"1rem\",\n    paddingBottom: \".5rem\",\n\n    \"& span\": {\n      color: blue\n    }\n  },\n  alertName: {\n    paddingBottom: \"1rem\",\n\n    color: red\n  },\n  alertContent: {\n    opacity: 0.7\n  }\n};\n","import React, { PureComponent } from \"react\";\n\nimport Modal from \"@material-ui/core/Modal\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Button from \"@material-ui/core/Button\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nclass TaskNameWarning extends PureComponent {\n  render() {\n    const { changeModalVisibility, taskNameIsEmpty, classes } = this.props;\n\n    const {\n      buttonContainer,\n      modalContainer,\n      modalContent,\n      alertContent,\n      alertName,\n      modal\n    } = classes;\n\n    return (\n      <Modal\n        aria-describedby=\"simple-modal-description\"\n        aria-labelledby=\"simple-modal-title\"\n        className={modalContainer}\n        open={taskNameIsEmpty}\n      >\n        <div className={modal}>\n          <Grid container className={modalContent}>\n            <Typography variant=\"h6\" id=\"modal-title\" className={alertName}>\n              Empty task name\n            </Typography>\n            <Typography\n              id=\"simple-modal-description\"\n              className={alertContent}\n              variant=\"subtitle1\"\n            >\n              You are trying close your task without name, enter the title and\n              try again!\n            </Typography>\n          </Grid>\n\n          <div className={buttonContainer}>\n            <Button\n              onClick={() => {\n                changeModalVisibility();\n              }}\n            >\n              Close\n            </Button>\n          </div>\n        </div>\n      </Modal>\n    );\n  }\n}\n\nexport default withStyles(styles)(TaskNameWarning);\n","import TaskNameWarning from \"./TaskNameWarning\";\nexport default TaskNameWarning;\n","const violet = \"#4823C2\";\n\nexport default {\n  timerContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n    flexDirection: \"column\"\n  },\n\n  taskInput: {\n    \"& $input::placeholder\": {\n      color: violet,\n      textAlign: \"center\",\n      opacity: 1\n    }\n  },\n\n  timerFab: {\n    width: \"10rem\",\n    height: \"10rem\",\n\n    margin: \"1.5rem\",\n\n    background: \"white\",\n\n    color: violet,\n    fontSize: \"1.5rem\"\n  },\n\n  timerButton: {\n    color: violet,\n    background: \"white\",\n    marginBottom: \"1.5rem\"\n  }\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { DateTime, Interval } from \"luxon\";\n\nimport {\n  pushTaskInTasksList,\n  setTaskName,\n  startTask,\n  stopTask\n} from \"../../domain/actions\";\n\nimport Timer from \"./Timer\";\nimport TaskNameWarning from \"../TaskNameWarning\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nclass TimerContainer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      time: \"00:00:00\",\n      taskNameIsEmpty: false\n    };\n  }\n\n  intervalID = 0;\n\n  componentDidMount() {\n    if (this.props.taskProps.timerStartTime) {\n      this.timer();\n      this.intervalID = setInterval(this.timer, 1000);\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.intervalID);\n  }\n\n  timer = () => {\n    this.setState({\n      time: Interval.fromDateTimes(\n        DateTime.fromISO(this.props.taskProps.timerStartTime),\n        DateTime.local()\n      )\n        .toDuration()\n        .toFormat(\"hh:mm:ss\")\n    });\n  };\n\n  startTimer = () => {\n    this.intervalID = setInterval(this.timer, 1000);\n\n    this.props.startTask(DateTime.local().toISO());\n  };\n\n  stopTimer = () => {\n    const { taskProps, stopTask, pushTaskInTasksList } = this.props;\n\n    this.setState({ time: \"00:00:00\" });\n    clearInterval(this.intervalID);\n\n    pushTaskInTasksList({\n      ...taskProps,\n      id: this.createTaskId(),\n      timerStopTime: DateTime.local().toISO()\n    });\n\n    stopTask();\n  };\n\n  createTaskId = () => {\n    const { tasksList } = this.props;\n\n    const lastTaskId = Math.max(...tasksList.map(task => task.id));\n\n    return lastTaskId > 0 ? lastTaskId + 1 : 1;\n  };\n\n  verifyTaskName = () => {\n    this.props.taskProps.taskName\n      ? this.stopTimer()\n      : this.changeModalVisibility();\n  };\n\n  changeModalVisibility = () => {\n    this.setState(prevState => {\n      return { taskNameIsEmpty: !prevState.taskNameIsEmpty };\n    });\n  };\n\n  render() {\n    const {\n      taskProps: { timerStartTime, taskName },\n      setTaskName,\n\n      classes\n    } = this.props;\n\n    return (\n      <>\n        <Timer\n          changeModalVisibility={this.changeModalVisibility}\n          taskNameIsEmpty={this.state.taskNameIsEmpty}\n          verifyTaskName={this.verifyTaskName}\n          startTimer={this.startTimer}\n          setTaskName={setTaskName}\n          timerStartTime={timerStartTime}\n          time={this.state.time}\n          taskName={taskName}\n          classes={classes}\n        />\n\n        <TaskNameWarning\n          changeModalVisibility={this.changeModalVisibility}\n          taskNameIsEmpty={this.state.taskNameIsEmpty}\n        />\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ taskProps, tasksList, time }) => {\n  return {\n    time,\n    taskProps,\n    tasksList\n  };\n};\n\nconst mapDispatchToProps = {\n  pushTaskInTasksList,\n  setTaskName,\n  startTask,\n  stopTask\n};\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withStyles(styles)\n)(TimerContainer);\n","import TimerContainer from \"./TimerContainer\";\nexport default TimerContainer;","import { DateTime, Interval } from \"luxon\";\n\nconst createChartData = tasksList => {\n  const chartData = [];\n\n  for (let hour = 0; hour < 24; hour++) {\n    const hourStart = DateTime.fromObject({ hour, minute: 0, second: 0 });\n    const hourEnd = DateTime.fromObject({ hour, minute: 59, second: 59 });\n    const hourInterval = Interval.fromDateTimes(hourStart, hourEnd);\n\n    const tasksTimeInThisHour = tasksList.filter(task =>\n      hourInterval.intersection(\n        Interval.fromDateTimes(\n          DateTime.fromISO(task.timerStartTime),\n          DateTime.fromISO(task.timerStopTime)\n        )\n      )\n    );\n\n    let tasksMinutesInThisHour;\n\n    if (tasksTimeInThisHour) {\n      tasksMinutesInThisHour = tasksTimeInThisHour.reduce(\n        (accumulator, task) => {\n          let tasksMinutes;\n\n          const taskStartDateTime = DateTime.fromISO(task.timerStartTime);\n          const taskStopDateTime = DateTime.fromISO(task.timerStopTime);\n\n          taskStartDateTime.hour === hour && taskStopDateTime.hour === hour\n            ? (tasksMinutes = Interval.fromDateTimes(\n                taskStartDateTime,\n                taskStopDateTime\n              )\n                .toDuration(\"minutes\")\n                .toObject().minutes)\n            : taskStartDateTime.hour === hour\n            ? (tasksMinutes = 60 - taskStartDateTime.minute)\n            : taskStopDateTime.hour === hour\n            ? (tasksMinutes = taskStopDateTime.minute)\n            : (tasksMinutes = 60);\n\n          return accumulator + Math.round(tasksMinutes);\n        },\n        0\n      );\n    }\n\n    chartData.push({\n      hour,\n      minutes: 60,\n      tasksTimeInThisHour: tasksMinutesInThisHour || 0\n    });\n  }\n\n  return chartData;\n};\n\nexport default createChartData;\n","import React, { PureComponent } from \"react\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Button from \"@material-ui/core/Button\";\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar\n} from \"recharts\";\n\nexport default class TasksChart extends PureComponent {\n  render() {\n    const { getRandomTasks, chartData, classes } = this.props;\n    const { generateButtonContainer, generateButton } = classes;\n\n    return (\n      <div>\n        <ResponsiveContainer id=\"container\" width=\"100%\" height={300}>\n          <BarChart data={chartData} margin={{ top: 20, left: -25 }}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"hour\" />\n            <YAxis dataKey=\"minutes\" />\n            <Tooltip />\n            <Legend />\n            <Bar\n              dataKey=\"tasksTimeInThisHour\"\n              name=\"Minutes in this hours\"\n              barSize={20}\n              fill=\"#4823C2\"\n            />\n          </BarChart>\n        </ResponsiveContainer>\n        <Grid container className={generateButtonContainer}>\n          <Grid item xs={12}>\n            <Button\n              className={generateButton}\n              variant=\"contained\"\n              size=\"small\"\n              onClick={() => getRandomTasks()}\n            >\n              Generate\n            </Button>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n","const violet = \"#4823C2\";\n\nexport default {\n  generateButtonContainer: {\n    justifyContent: \"justify-end\",\n    textAlign: \"right\",\n    padding: \"1rem 0\"\n  },\n  generateButton: {\n    color: violet,\n    background: \"white\"\n  }\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\nimport { DateTime } from \"luxon\";\n\nimport createChartData from \"./createChartData\";\nimport { setTasksListValue } from \"../../domain/actions\";\n\nimport TasksChart from \"./TasksChart\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nconst getRandom = (min, max) => {\n  return Math.floor(Math.random() * (max - min) + min + 1);\n};\n\nclass ChartContainer extends Component {\n  getRandomTasks = () => {\n    const data = [];\n\n    let timerStartTime = DateTime.fromObject({ hour: 0, minute: 0, second: 0 });\n    let timerStopTime = null;\n\n    const randomNumberOfTask = getRandom(10, 16);\n\n    for (let task = 1; task < randomNumberOfTask; task++) {\n      timerStartTime = timerStartTime.plus({\n        seconds: getRandom(0, 60 * 60 * 1.5)\n      });\n\n      timerStopTime = timerStartTime.plus({\n        seconds: getRandom(60 * 10, 60 * 60 * 1.5)\n      });\n\n      data.push({\n        id: task,\n        taskName: `Random task #${task}`,\n        timerStartTime: timerStartTime,\n        timerStopTime: timerStopTime\n      });\n\n      timerStartTime = timerStopTime;\n    }\n\n    this.props.setTasksListValue(data);\n  };\n\n  render() {\n    const { tasksList, classes } = this.props;\n\n    const chartData = createChartData(tasksList);\n\n    return (\n      <TasksChart\n        getRandomTasks={this.getRandomTasks}\n        chartData={chartData}\n        classes={classes}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasksList }) => {\n  return {\n    tasksList\n  };\n};\n\nconst mapDispatchToProps = { setTasksListValue };\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withStyles(styles)\n)(ChartContainer);\n","import TasksChartContainer from \"./TasksChartContainer\";\nexport default TasksChartContainer;\n","import React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { DateTime, Interval } from \"luxon\";\n\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Button from \"@material-ui/core/Button\";\n\nexport default class TasksList extends PureComponent {\n  render() {\n    const { deleteTask, tasksList, classes } = this.props;\n    const { tableRow, noTasks, tasksButton } = classes;\n\n    return (\n      <Table>\n        <TableHead>\n          <TableRow>\n            <TableCell>№</TableCell>\n            <TableCell>Task</TableCell>\n            <TableCell>Time start</TableCell>\n            <TableCell>Time end</TableCell>\n            <TableCell>Time spend</TableCell>\n            <TableCell>Info</TableCell>\n            <TableCell>Delete</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {tasksList.length > 0 ? (\n            tasksList.map(task => (\n              <TableRow key={task.id} className={tableRow}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {task.id}\n                </TableCell>\n                <TableCell>{task.taskName}</TableCell>\n                <TableCell>\n                  {DateTime.fromISO(task.timerStartTime).toFormat(\"HH:mm:ss\")}\n                </TableCell>\n                <TableCell>\n                  {DateTime.fromISO(task.timerStopTime).toFormat(\"HH:mm:ss\")}\n                </TableCell>\n                <TableCell>\n                  {Interval.fromDateTimes(\n                    DateTime.fromISO(task.timerStartTime),\n                    DateTime.fromISO(task.timerStopTime)\n                  )\n                    .toDuration()\n                    .toFormat(\"hh:mm:ss\")}\n                </TableCell>\n                <TableCell>\n                  <Button\n                    className={tasksButton}\n                    variant=\"contained\"\n                    size=\"small\"\n                    component={Link}\n                    to={`/tasks/${task.id}`}\n                  >\n                    Info\n                  </Button>\n                </TableCell>\n                <TableCell>\n                  <Button\n                    className={tasksButton}\n                    variant=\"contained\"\n                    size=\"small\"\n                    onClick={() => deleteTask(task.id)}\n                  >\n                    Delete\n                  </Button>\n                </TableCell>\n              </TableRow>\n            ))\n          ) : (\n            <TableRow className={tableRow}>\n              <TableCell className={noTasks} colSpan={7}>\n                No tasks to show\n              </TableCell>\n            </TableRow>\n          )}\n        </TableBody>\n      </Table>\n    );\n  }\n}\n","const cyanogen = \"#E8F6FF\";\nconst violet = \"#4823C2\";\n\nexport default {\n  tableRow: {\n    background: cyanogen,\n    color: violet\n  },\n  noTasks: {\n    textAlign: \"center\"\n  },\n  tasksButton: {\n    color: violet,\n    background: \"white\"\n  }\n};\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport { deleteTask } from \"../../domain/actions\";\n\nimport TasksList from \"./TasksList\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nclass TasksListContainer extends Component {\n  render() {\n    const { deleteTask, tasksList, classes } = this.props;\n    return (\n      <TasksList\n        deleteTask={deleteTask}\n        tasksList={tasksList}\n        classes={classes}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasksList }) => {\n  return {\n    tasksList\n  };\n};\n\nconst mapDispatchToProps = { deleteTask };\n\nexport default compose(\n  connect(mapStateToProps, mapDispatchToProps),\n  withStyles(styles)\n)(TasksListContainer);\n","import TasksListContainer from \"./TasksListContainer\";\nexport default TasksListContainer;\n","const blue = \"#00BCD3\";\n\nexport default {\n  tasksTimerContainer: {\n    padding: \"2rem\"\n  },\n  tabsContainer: {\n    background: blue,\n    boxShadow: \"none\"\n  }\n};\n","import React, { PureComponent } from \"react\";\nimport { Link, Route } from \"react-router-dom\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Tabs from \"@material-ui/core/Tabs\";\nimport Tab from \"@material-ui/core/Tab\";\n\nimport Timer from \"../../components/Timer\";\nimport TasksChart from \"../../components/TasksChart\";\nimport TasksList from \"../../components/TasksList\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nclass TabsAndTimer extends PureComponent {\n  render() {\n    const { location, classes } = this.props;\n    const { tasksTimerContainer, tabsContainer } = classes;\n\n    const currentTab = location.pathname === \"/chart\" ? \"Chart\" : \"Log\";\n\n    return (\n      <div className={tasksTimerContainer}>\n        <Grid container justify=\"center\">\n          <Grid item xs={12} lg={10}>\n            <Timer />\n          </Grid>\n          <Grid item xs={12} lg={10}>\n            <section>\n              <AppBar position=\"relative\" className={tabsContainer}>\n                <Tabs variant=\"fullWidth\" value={currentTab}>\n                  <Tab\n                    value=\"Log\"\n                    label=\"Tasks log\"\n                    component={Link}\n                    to={\"/tasks\"}\n                  />\n                  <Tab\n                    value=\"Chart\"\n                    label=\"Tasks chart\"\n                    component={Link}\n                    to={\"/chart\"}\n                  />\n                </Tabs>\n              </AppBar>\n\n              <Route path=\"/tasks\" exact component={TasksList} />\n              <Route path=\"/chart\" exact component={TasksChart} />\n            </section>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default withStyles(styles)(TabsAndTimer);\n","import TabsAndTimer from \"./TabsAndTimer\";\nexport default TabsAndTimer;\n","import React, { PureComponent } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { DateTime, Interval } from \"luxon\";\n\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\n\nexport default class CurrentTask extends PureComponent {\n  render() {\n    const { task, classes } = this.props;\n    const { card, taskName, buttonContainer, button } = classes;\n\n    return (\n      <Card key={task.id} className={card}>\n        <CardContent>\n          <Typography className={taskName} variant=\"h4\" component=\"h2\">\n            {`Task name: ${task.taskName}`}\n          </Typography>\n          <Typography component=\"p\">\n            {DateTime.fromISO(task.timerStartTime).toFormat(\n              \"'The timer was started on' yyyy-MM-dd 'at' HH:mm:ss\"\n            )}\n          </Typography>\n          <Typography component=\"p\">\n            {DateTime.fromISO(task.timerStopTime).toFormat(\n              \"'The timer was stopped on' yyyy-MM-dd 'at' HH:mm:ss\"\n            )}\n          </Typography>\n          <Typography component=\"p\">\n            {Interval.fromDateTimes(\n              DateTime.fromISO(task.timerStartTime),\n              DateTime.fromISO(task.timerStopTime)\n            )\n              .toDuration()\n              .toFormat(\"'Time spent on task:' hh:mm:ss\")}\n          </Typography>\n        </CardContent>\n        <CardActions className={buttonContainer}>\n          <Button className={button} size=\"small\" component={Link} to=\"/tasks\">\n            Back\n          </Button>\n        </CardActions>\n      </Card>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\n\nimport {\n  ResponsiveContainer,\n  BarChart,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Legend,\n  Bar\n} from \"recharts\";\n\nexport default class CurrentTaskChart extends PureComponent {\n  render() {\n    return (\n      <ResponsiveContainer id=\"container\" width=\"80%\" height={300}>\n        <BarChart data={this.props.dataForChart} margin={{ top: 20 }}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"hour\" />\n          <YAxis dataKey=\"minutes\" />\n          <Tooltip />\n          <Legend />\n          <Bar\n            dataKey=\"tasksTimeInThisHour\"\n            name=\"Minutes in this hours\"\n            barSize={20}\n            fill=\"#4823C2\"\n          />\n        </BarChart>\n      </ResponsiveContainer>\n    );\n  }\n}\n","import { DateTime, Interval } from \"luxon\";\n\nconst createTaskChartData = task => {\n  const chartData = [];\n\n  const findStartTime = () => {\n    const taskStartDateFromISO = DateTime.fromISO(task.timerStartTime);\n    const { hour, minute, second } = taskStartDateFromISO;\n    return { hour, minute, second };\n  };\n\n  const findStopTime = () => {\n    const taskStopDateFromISO = DateTime.fromISO(task.timerStopTime);\n    const { hour, minute, second } = taskStopDateFromISO;\n    return { hour, minute, second };\n  };\n\n  const taskForChart = [\n    { startTime: findStartTime(), stopTime: findStopTime() }\n  ];\n\n  for (let hour = 0; hour < 24; hour++) {\n    const hourStart = DateTime.fromObject({ hour, minute: 0, second: 0 });\n    const hourEnd = DateTime.fromObject({ hour, minute: 59, second: 59 });\n    const hourInterval = Interval.fromDateTimes(hourStart, hourEnd);\n\n    const tasksTimeInThisHour = taskForChart.filter(task =>\n      hourInterval.intersection(\n        Interval.fromDateTimes(\n          DateTime.fromObject(task.startTime),\n          DateTime.fromObject(task.stopTime)\n        )\n      )\n    );\n\n    let tasksMinutesInThisHour;\n\n    if (tasksTimeInThisHour) {\n      tasksMinutesInThisHour = tasksTimeInThisHour.reduce(\n        (accumulator, task) => {\n          let tasksMinutes;\n          const taskStartDateTime = DateTime.fromObject(task.startTime);\n          const taskStopDateTime = DateTime.fromObject(task.stopTime);\n\n          taskStartDateTime.hour === hour && taskStopDateTime.hour === hour\n            ? (tasksMinutes = Interval.fromDateTimes(\n                taskStartDateTime,\n                taskStopDateTime\n              )\n                .toDuration(\"minutes\")\n                .toObject().minutes)\n            : taskStartDateTime.hour === hour\n            ? (tasksMinutes = 60 - taskStartDateTime.minute)\n            : taskStopDateTime.hour === hour\n            ? (tasksMinutes = taskStopDateTime.minute)\n            : (tasksMinutes = 60);\n\n          return accumulator + Math.round(tasksMinutes);\n        },\n        0\n      );\n    }\n    chartData.push({\n      hour,\n      minutes: 60,\n      tasksTimeInThisHour: Math.round(tasksMinutesInThisHour) || 0\n    });\n  }\n\n  return chartData;\n};\n\nexport default createTaskChartData;\n","const violet = \"#4823C2\";\n\nexport default {\n  card: {\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  taskName: {\n    color: violet\n  },\n  buttonContainer: {\n    justifyContent: \"flex-end\"\n  },\n  button: {\n    color: violet,\n    background: \"white\"\n  }\n};\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { compose } from \"redux\";\n\nimport CurrentTask from \"./CurrentTask\";\nimport CurrentTaskChart from \"./CurrentTaskChart\";\nimport createTaskChartData from \"./createTaskChartData\";\n\nimport Grid from \"@material-ui/core/Grid\";\n\nimport { withStyles } from \"@material-ui/core/styles\";\nimport styles from \"./styles\";\n\nclass CurrentTaskContainer extends Component {\n  render() {\n    const { tasksList, match, classes } = this.props;\n\n    const task = tasksList.find(task => task.id === Number(match.params.id));\n\n    return (\n      <>\n        {task ? (\n          <Grid container alignItems=\"center\" direction=\"column\">\n            <CurrentTask task={task} classes={classes} />\n            <CurrentTaskChart dataForChart={createTaskChartData(task)} />\n          </Grid>\n        ) : (\n          <Redirect to={\"/404\"} />\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = ({ tasksList }) => {\n  return {\n    tasksList\n  };\n};\n\nexport default compose(\n  connect(mapStateToProps),\n  withStyles(styles)\n)(CurrentTaskContainer);\n","import CurrentTaskContainer from \"./CurrentTaskContainer\";\nexport default CurrentTaskContainer;\n","import React from \"react\";\nimport {\n  HashRouter as Router,\n  Redirect,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport PageNotFound from \"../PageNotFound\";\nimport TabsAndTimer from \"../TabsAndTimer\";\nimport Task from \"../../components/CurrentTask\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/\" exact render={() => <Redirect to=\"/tasks\" />} />\n        <Route path=\"/tasks\" exact component={TabsAndTimer} />\n        <Route path=\"/tasks/:id\" exact component={Task} />\n        <Route path=\"/chart\" exact component={TabsAndTimer} />\n        <Route component={PageNotFound} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","import App from \"./App\";\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { compose } from \"redux\";\nimport ReactDOM from \"react-dom\";\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport reducers from \"./domain/reducers\";\nimport { Provider } from \"react-redux\";\nimport rootSaga from \"./sagas\";\n\nimport App from \"./pages/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst store = createStore(\n  reducers,\n  compose(\n    applyMiddleware(sagaMiddleware),\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n  )\n);\nsagaMiddleware.run(rootSaga);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}